// ✅ Import necessary functions from RTK Query
import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react'
import type { RootState } from '@/app/store' // 📦 Import our RootState type for accessing auth slice

// ✅ Create RTK Query API Slice for Authentication
export const authApi = createApi({
    reducerPath: 'authApi', // 🔑 Unique key in Redux store

    // 🔌 Base configuration for all API requests
    baseQuery: fetchBaseQuery({
        baseUrl: import.meta.env.VITE_API_BASE_URL, // 🌐 Base URL from `.env` file (e.g., http://localhost:3000/api)

        // 🔐 Automatically attach Authorization header with token from Redux store
        prepareHeaders: (headers, { getState }) => {
            const token = (getState() as RootState).auth.token // 🧠 Get token from auth slice
            if (token) {
                headers.set('Authorization', `Bearer ${token}`) // 📎 Set Authorization header
            }
            return headers
        },
    }),

    // 📡 Define API endpoints
    endpoints: (builder) => ({
        // 🔓 Login endpoint
        login: builder.mutation<
            { token: string },                    // ✅ Expected response type from backend
            { email: string; password: string }  // 📤 Data we send in request
        >({
            query: (credentials) => ({
                url: '/auth/login',
                method: 'POST',
                body: credentials, // 🧾 POST body = email + password
            }),
        }),

        // 📝 Register endpoint
        register: builder.mutation<
            { token: string },                    // ✅ Expected response (JWT token)
            any                                   // 🔄 Input body — could be typed more strictly
        >({
            query: (body) => ({
                url: '/auth/register',
                method: 'POST',
                body, // 👤 includes name, profession, email, password
            }),
        }),

        // 👤 Get current authenticated user
        getMe: builder.query<
            { id: string; email: string; name: string; role: string }, // ✅ Response = user info
            void                                         // 🚫 No input params
        >({
            query: () => '/auth/me', // 🔍 GET request to /auth/me
        }),
    }),
})

// ✅ Export hooks auto-generated by RTK Query
export const {
    useLoginMutation,
    useRegisterMutation,
    useGetMeQuery,
    useLazyGetMeQuery,
} = authApi
